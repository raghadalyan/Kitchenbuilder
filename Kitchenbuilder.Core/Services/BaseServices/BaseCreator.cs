using Kitchenbuilder.Core.Models;
using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using System;
using System.IO;

namespace Kitchenbuilder.Core.Services.BaseServices
{
    public static class BaseCreator
    {
        public static Kitchenbuilder.Core.Models.Base CreateBase(Kitchen kitchen)
        {
            try
            {
                if (kitchen.Floor.Width <= 0 || kitchen.Floor.Length <= 0)
                    throw new InvalidOperationException("Floor width and length must be greater than 0.");

                double floorWidth = kitchen.Floor.Width;
                double floorLength = kitchen.Floor.Length;

                // Step 4: Analyze empty spaces using BaseAnalyzer
                var mergedEmptySpaces = BaseAnalyzer.AnalyzeEmptySpaces(kitchen);
                WriteDebugLog("[CreateBase] BaseAnalyzer completed. Empty space details saved.");

                // Step 5: Filter the empty spaces
                var filteredEmptySpaces = FilterEmptySpaces.FilterSpaces(mergedEmptySpaces);
                WriteDebugLog("[CreateBase] FilterEmptySpaces completed. Filtered space details saved.");

                // Step 6: Evaluate layout suggestions
                var kitchenLayoutSuggestions = EvaluateEmptySpaces.Evaluate(filteredEmptySpaces, kitchen);
                WriteDebugLog("[CreateBase] EvaluateEmptySpaces completed. Layout suggestions saved.");

                // ✅ Return a Base object with basic floor dimensions (add more properties if needed)
                return new Kitchenbuilder.Core.Models.Base
                {
                    Width1 = floorWidth,
                    Width2 = floorLength,
                    FileName = "AutoGeneratedBase"
                };

            }
            catch (Exception ex)
            {
                WriteDebugLog($"❌ Error: {ex.Message}");
                throw;
            }
        }

        private static void WriteDebugLog(string message)
        {
            try
            {
                string userDownloads = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.UserProfile), "Downloads");
                string debugPath = Path.Combine(userDownloads, "Kitchenbuilder", "Output", "debug.txt");

                using (StreamWriter writer = new StreamWriter(debugPath, true))
                {
                    writer.WriteLine($"[{DateTime.Now}] {message}");
                }
            }
            catch
            {
                // In case writing to the file fails, just skip logging.
            }
        }
    }
}
