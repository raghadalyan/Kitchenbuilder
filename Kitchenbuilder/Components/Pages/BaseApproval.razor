@page "/base-approval"
@inject NavigationManager NavManager
@inject SolidWorksSessionService SwSession
@using SolidWorks.Interop.sldworks
@using SolidWorks.Interop.swconst
@using Kitchenbuilder.Core
@using Kitchenbuilder.Core.Models
@using Kitchenbuilder.Core.WallBuilders
@using System.Text.Json
@using System.IO
@using Microsoft.AspNetCore.Components


<link href="css/base.css" rel="stylesheet" />

<div class="approval-page">
    <div class="form-container">
        @if (isLoading)
        {
            <div class="loading-container">
                <p>Please wait a moment while the base file is being prepared...</p>
                <img src="/Images/loading.gif" alt="Loading..." class="loading-image" />
                <p>Loading base preview...</p>
            </div>
        }
        else
        {
            <p>✅ You can now review the selected base in SolidWorks.</p>
            <button class="continue-button" @onclick="ContinueToCountertop">Continue</button>
        }
    </div>
</div>

@code {
    [Parameter][SupplyParameterFromQuery(Name = "selected")] public string? selectedOption { get; set; }

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_baseapproval.txt";

            try
            {
                File.AppendAllText(debugPath, $"🟢 Started /base-approval with selected={selectedOption}\n");

                if (string.IsNullOrWhiteSpace(selectedOption))
                {
                    File.AppendAllText(debugPath, "❌ selectedOption is missing\n");
                    return;
                }

                string partPath = $@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\temp\temp_{selectedOption}.SLDPRT";
                File.AppendAllText(debugPath, $"📁 Target base file: {partPath}\n");

                if (!File.Exists(partPath))
                {
                    File.AppendAllText(debugPath, $"❌ Base file not found: {partPath}\n");
                    return;
                }

                // ✅ أطلق SolidWorks إذا لم يكن مفعلاً
                if (SwSession.GetActiveModel() == null)
                {
                    var swAppInstance = (ISldWorks)Activator.CreateInstance(Type.GetTypeFromProgID("SldWorks.Application"));
                    swAppInstance.Visible = true;
                    SwSession.SetApp(swAppInstance);
                    File.AppendAllText(debugPath, "🟢 SolidWorks launched and stored in session\n");

                    LayoutLauncher.ArrangeWindows(swAppInstance);
                }

                var swApp = SwSession.GetApp();
                int errors = 0, warnings = 0;

                var model = swApp.OpenDoc6(
                    partPath,
                    (int)swDocumentTypes_e.swDocPART,
                    (int)swOpenDocOptions_e.swOpenDocOptions_Silent,
                    "", ref errors, ref warnings
                ) as IModelDoc2;

                if (model == null)
                {
                    File.AppendAllText(debugPath, $"❌ Failed to load base model into SolidWorks\n");
                    return;
                }

                File.AppendAllText(debugPath, $"✅ Base model loaded successfully\n");
            }
            catch (Exception ex)
            {
                File.AppendAllText(@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_baseapproval.txt",
                    $"❌ Exception: {ex.Message}\n{ex.StackTrace}\n");
            }
        });

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private void ContinueToCountertop()
    {
        if (!string.IsNullOrWhiteSpace(selectedOption))
        {
            NavManager.NavigateTo($"/countertop-options?base={selectedOption}");
        }
    }
}