@page "/island-page"
@inject Kitchenbuilder.Core.SolidWorksSessionService SwSession
@using SolidWorks.Interop.sldworks
@using Kitchenbuilder.Core
@using System.IO
@using Microsoft.AspNetCore.Components
@using Kitchenbuilder.Core.Models

<div class="page-background">
    <div class="island-container">
        <h2>Island Options (Option @Option)</h2>

        @if (IsLoading)
        {
                <div class="loading-box">
                    <img src="Images/Loading.gif" alt="Loading..." />
                    <p>Loading from SolidWorks...</p>
                </div>
        }
        else
        {
                <div class="checkbox-container">
                    <label>
                        <input type="checkbox" @bind="ShowOptions" @bind:after="OnCheckboxChanged" />
                        Do you want to customize an island?
                    </label>
                </div>

            @if (ShowOptions)
            {
                <div style="text-align:center; margin: 10px 0;">
                    <img src="Images/directional.png"
                         alt="Direction"
                         class="direction-img"
                         style="cursor:pointer; width:50px;"
                         @onclick="ToggleIslandAngle" />
                </div>

                <label>Depth (cm):</label>
                <input type="number" @bind="island.Depth" />

                <label>Width (cm):</label>
                <input type="number" @bind="island.Width" />

                <label>Material:</label>
                <button @onclick="SaveIsland">Save</button>

                <input type="text" @bind="island.Material" placeholder="e.g. Wood, Marble"  />
                <div class="position-box" style="border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
                    <h4>Island Position</h4>

                    <label>Distance X (cm):</label>
                    <input type="number" @bind="island.DistanceX" />

                    <label>Distance Y (cm):</label>
                    <input type="number" @bind="island.DistanceY" />

                    <button @onclick="SaveIslandPosition" style="margin-top: 10px;">Save Position</button>
                </div>

            }
            <button class="continue-button" @onclick="NavigateToSinkCooktopOptions" style="margin-top: 20px;">
                Continue to Sink & Cooktop Options
            </button>


        }
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavManager { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "option")]
    public int Option { get; set; } = 3;

    private bool ShowOptions = false;
    private bool IsLoading = false;
    private Kitchenbuilder.Core.Models.Island island = new();


    private IModelDoc2? model;

    private async Task OnCheckboxChanged()
    {
        IsLoading = true;
        StateHasChanged();

        string targetBody = "Extrude_Island1";
        string jsonPath = $@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON\Option{Option}SLD.json";

        await Task.Run(() =>
        {
            model = SwSession.GetActiveModel();
            if (model == null)
            {
                Log("❌ Model is null.");
                return;
            }

            Log($"✅ Model loaded: {model.GetTitle()}");

            var allBodies = BodyNameHelper.GetAllBodyNames(model);
            foreach (var b in allBodies)
                Log($"🧱 Body found: {b}");

            if (!allBodies.Contains(targetBody))
            {
                Log($"❌ Island body '{targetBody}' not found.");
                return;
            }

            double floorWidth = 0, floorLength = 0;
            try
            {
                var jsonText = File.ReadAllText(jsonPath);
                var jsonDoc = System.Text.Json.JsonDocument.Parse(jsonText);
                var root = jsonDoc.RootElement;

                floorWidth = root.GetProperty("Floor").GetProperty("Width").GetProperty("Size").GetDouble();
                floorLength = root.GetProperty("Floor").GetProperty("Length").GetProperty("Size").GetDouble();

                Log($"📐 Floor dimensions: Width={floorWidth}, Length={floorLength}");
            }
            catch (Exception ex)
            {
                Log($"❌ Failed to read floor dimensions: {ex.Message}");
                return;
            }

            if (ShowOptions)
            {
                Show_Bodies_In_Sld_IModel.ShowMultipleBodies(model, new[] { targetBody });
                Log($"✅ Showing island body: {targetBody}");

                EditSketchDim_IModel.SetDimension(model, "D1@Sketch_Move_Island", 0);
                EditSketchDim_IModel.SetDimension(model, "D2@Sketch_Move_Island", 0);
                EditSketchDim_IModel.SetDimension(model, "DX@Sketch_Move_Island", floorLength / 2);
                EditSketchDim_IModel.SetDimension(model, "DY@Sketch_Move_Island", floorWidth / 2);
                Log($"📏 Position set to center: DX={floorLength / 2}, DY={floorWidth / 2}");
            }
            else
            {
                Hide_Bodies_In_Sld_IModel.HideMultipleBodies(model, new[] { targetBody });
                Log($"❌ Hiding island body: {targetBody}");

                EditSketchDim_IModel.SetDimension(model, "D1@Sketch_Move_Island", 2000);
                EditSketchDim_IModel.SetDimension(model, "D2@Sketch_Move_Island", 2000);
                Log("📏 Dimensions set to 2000.");
            }
        });

        IsLoading = false;
        StateHasChanged();
    }
    private void SaveIsland()
    {
        int minSize = 60;

        int adjustedDepth = Math.Max(island.Depth, minSize);
        int adjustedWidth = Math.Max(island.Width, minSize);

        Log($"💾 Saving island: Depth={adjustedDepth}, Width={adjustedWidth}, Material={island.Material}");

        if (model == null)
        {
            Log("❌ Cannot save – model is null.");
            return;
        }

        try
        {
            EditSketchDim_IModel.SetDimension(model, "Depth@Sketch_Island", adjustedDepth);
            EditSketchDim_IModel.SetDimension(model, "Width@Sketch_Island", adjustedWidth);

            EditSketchDim_IModel.SetDimension(model, "D1_Circle@Sketch73", adjustedDepth / 2.0);
            EditSketchDim_IModel.SetDimension(model, "D2_Circle@Sketch73", (adjustedWidth - 10) / 2.0);

            Log("✅ Island dimensions updated.");
        }
        catch (Exception ex)
        {
            Log($"❌ Error saving island: {ex.Message}");
        }
    }

    private void ToggleIslandAngle()
    {
        if (model == null)
        {
            Log("❌ Cannot toggle direction – model is null.");
            return;
        }

        island.Direction = (island.Direction == 90) ? 360 : 90;

        try
        {
            EditSketchDim_IModel.SetDimension(model, "angle@Sketch_Move_Island", island.Direction);
            Log($"🔄 Island rotation set to {island.Direction}°");
        }
        catch (Exception ex)
        {
            Log($"❌ Error changing island direction: {ex.Message}");
        }
    }

    private void SaveIslandPosition()
    {
        if (model == null)
        {
            Log("❌ Model is null – can't save island position.");
            return;
        }

        double minX, minY;

        if (island.Direction == 90)
        {
            minX = 60 + 60 - (island.Depth / 2.0);
            minY = 60 + 60 - (island.Width / 2.0);
        }
        else // direction = 360
        {
            minX = 60 + 60 - (island.Width / 2.0);
            minY = 60 + 60 - (island.Depth / 2.0);
        }

        if (island.DistanceX < minX || island.DistanceY < minY)
        {
            Log($"❌ Position too close. MinX={minX}, MinY={minY} | Given: DX={island.DistanceX}, DY={island.DistanceY}");
            return;
        }

        try
        {
            EditSketchDim_IModel.SetDimension(model, "DX@Sketch_Move_Island", island.DistanceX);
            EditSketchDim_IModel.SetDimension(model, "DY@Sketch_Move_Island", island.DistanceY);

            Log($"✅ Island position updated: DX={island.DistanceX}, DY={island.DistanceY}");
        }
        catch (Exception ex)
        {
            Log($"❌ Failed to update island position: {ex.Message}");
        }
    }

    private void Log(string message)
    {
        string folder = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\island";
        string file = Path.Combine(folder, "island_debug.txt");

        try
        {
            Directory.CreateDirectory(folder);
            File.AppendAllText(file, $"{DateTime.Now:HH:mm:ss} - {message}\n");
        }
        catch { }

        Console.WriteLine(message);
    }
    private void NavigateToSinkCooktopOptions()
    {
        string optionString = $"Option{Option}";
        NavManager.NavigateTo($"/sink-cooktop-options?option={optionString}");
    }

}
