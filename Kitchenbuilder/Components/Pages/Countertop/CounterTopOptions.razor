@page "/countertop-options"
@using System.IO
@using System.Text.Json
@inject NavigationManager NavManager
@inject SolidWorksSessionService SwSession
@using Kitchenbuilder.Core
@using static Kitchenbuilder.Core.HandleCounterTop
@using SolidWorks.Interop.sldworks
@using SolidWorks.Interop.swconst

<!-- 🔧 START WRAPPER -->
<div class="countertop-page">
    <div class="content-container">
        <h1 class="title">Adjust Countertop Distances</h1>

        @if (isLoading)
        {
            <div class="loading-container">
                <img src="Images/Loading.gif" alt="Loading..." />
                <p>Loading countertops... please wait</p>
            </div>
        }
        else
        {
            <p class="status-message">
                ✅ Reached Countertop Options Page for: <span style="color:#2c3e50">@baseName</span>
            </p>

            @if (stations.Count > 0)
            {
                <div class="step-indicators">
                    @for (int i = 0; i < stations.Count; i++)
                    {
                        <div @onclick="@(() => GoTo(i))"
                             class="@(i == currentStationIndex ? "step-indicator active" : "step-indicator")">
                            @(i + 1)
                        </div>
                    }
                </div>

                <div class="station-box">
                    <img src="Images/Delete.png" class="delete-icon"
                         @onclick="() => DeleteCountertop(currentStationIndex)"
                         alt="Delete" title="Delete countertop" />

                    <h3>📐 Editing: CT_@CurrentSketch</h3>

                    <div class="distance-inputs">
                        <label>Distance from Left:</label>
                        <input type="number" @bind="LeftDistance" placeholder="Enter left distance" /><br />

                        <label>Distance from Right:</label>
                        <input type="number" @bind="RightDistance" placeholder="Enter right distance" /><br /><br />

                        <button class="save-button" @onclick="ApplyDistances">💾 Save</button>
                    </div>
                </div>

                @if (showDeleteConfirmation)
                {
                    <div class="confirm-box">
                        <p>Are you sure you want to delete CT_@CurrentSketch?</p>
                        <button @onclick="ConfirmDelete">Yes</button>
                        <button @onclick="() => showDeleteConfirmation = false">Cancel</button>
                    </div>
                }

                <div class="nav-buttons">
                    <button @onclick="GoBack" disabled="@(currentStationIndex == 0)">⬅️ Back</button>
                    <button @onclick="GoNext" disabled="@(currentStationIndex == stations.Count - 1)">Next ➡️</button>
                </div>

                <div class="continue-section">
                    <img src="Images/Continue.gif"
                         @onclick="ContinueToSinkCooktop"
                         alt="Continue" title="Click to continue" />
                </div>
            }
        }
    </div>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "base")]
    public string? baseName { get; set; }

    private bool isLoading = true;
    private List<CountertopStation> stations = new();
    private int currentStationIndex = 0;
    private string CurrentSketch =>
        (stations.Count > 0 && currentStationIndex >= 0 && currentStationIndex < stations.Count)
        ? stations[currentStationIndex].SketchName
        : "";
    private double? LeftDistance { get; set; }
    private double? RightDistance { get; set; }

    private bool showDeleteConfirmation = false;

    void Log(string message)
    {
        string debugPath = Path.Combine(
            KitchenConfig.Get().BasePath,
            "Kitchenbuilder", "Output", "countertop_debug.txt"
        );
        string timestamped = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}{System.Environment.NewLine}";
        File.AppendAllText(debugPath, timestamped);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await Task.Run(() =>
        {
            Log("🟢 OnInitialized started in /countertop-options");

            if (string.IsNullOrWhiteSpace(baseName))
            {
                Log("❌ baseName is null or empty");
                return;
            }

            string jsonPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Kitchenbuilder", "JSON", $"Option{baseName}SLD.json");
            string partPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Output", "temp", $"temp_Option{baseName}.SLDPRT");


            Log($"📦 baseName = {baseName}");
            Log($"📄 JSON path = {jsonPath}");
            Log($"🧱 Part path = {partPath}");

            if (!File.Exists(jsonPath) || !File.Exists(partPath))
            {
                Log("❌ JSON or SLDPRT file does not exist.");
                return;
            }

            try
            {
                ISldWorks swApp;
                try { swApp = SwSession.GetApp(); }
                catch (Exception ex)
                {
                    Log($"❌ Failed to get SolidWorks app: {ex.Message}");
                    return;
                }

                int errors = 0, warnings = 0;
                var model = swApp.OpenDoc6(partPath,
                    (int)swDocumentTypes_e.swDocPART,
                    (int)swOpenDocOptions_e.swOpenDocOptions_Silent,
                    "", ref errors, ref warnings) as IModelDoc2;

                if (model == null)
                {
                    Log("❌ Failed to open part.");
                    return;
                }

                SwSession.SetActiveModel(model);
                LayoutLauncher.ArrangeWindows(swApp); // <-- ADD THIS LINE HERE


                string jsonText = File.ReadAllText(jsonPath);
                var jsonDoc = JsonDocument.Parse(jsonText);
                foreach (var wallName in new[] { "Wall1", "Wall2", "Wall3", "Wall4" })
                {
                    if (!jsonDoc.RootElement.TryGetProperty(wallName, out JsonElement wall)) continue;
                    if (!wall.TryGetProperty("Bases", out JsonElement bases)) continue;

                    foreach (var baseItem in bases.EnumerateObject())
                    {
                        var baseValue = baseItem.Value;
                        if (!baseValue.TryGetProperty("Visible", out JsonElement vis) || !vis.GetBoolean()) continue;
                        if (!baseValue.TryGetProperty("SketchName", out JsonElement sketchProp)) continue;

                        string sketchName = sketchProp.GetString();
                        if (string.IsNullOrWhiteSpace(sketchName)) continue;

                        string extrudeName = $"Extrude_CT_{sketchName}";
                        Log($"👁️ Attempting to show countertop body: {extrudeName}");
                        Show_Bodies_In_Sld.ShowBody((ModelDoc2)model, extrudeName);
                    }
                }
                // 💾 Save the file after showing countertop bodies
                int saveErrors = 0;
                bool saved = model.Save3((int)swSaveAsOptions_e.swSaveAsOptions_Silent, ref saveErrors, ref saveErrors);
                Log(saved ? "✅ Part file saved successfully after showing bodies." : $"❌ Failed to save part file. Error code: {saveErrors}");


                // ✅ Call only once after the loop:
                AddCountertopFields(jsonPath);

                // ✅ Then extract updated stations
                stations = ExtractCountertopStations(jsonPath);

                stations = ExtractCountertopStations(jsonPath);
                if (stations.Count > 0)
                {
                    EditCurrentSketch();
                }

                Log("✅ Finished showing all countertop bodies.");
            }
            catch (Exception ex)
            {
                Log($"❌ Exception in OnInitialized: {ex.Message}");
            }
        });

        isLoading = false;
    }

    private void GoNext()
    {
        if (currentStationIndex < stations.Count - 1)
        {
            currentStationIndex++;
            EditCurrentSketch();
        }
    }

    private void GoBack()
    {
        if (currentStationIndex > 0)
        {
            currentStationIndex--;
            EditCurrentSketch();
        }
    }

    private void GoTo(int index)
    {
        if (index >= 0 && index < stations.Count)
        {
            currentStationIndex = index;
            EditCurrentSketch();
        }
    }

    private void EditCurrentSketch()
    {
        var model = SwSession.GetActiveModel();
        if (model != null && !string.IsNullOrEmpty(CurrentSketch))
        {
            string sketchName = $"CT_{CurrentSketch}";
            HandleCounterTop.EditSketchByName(model, sketchName, Log);
        }

        // Sync values from station
        var current = stations[currentStationIndex];
        LeftDistance = current.Left;
        RightDistance = current.Right;
    }

    private void ApplyDistances()
    {
        var model = SwSession.GetActiveModel();
        if (model != null && !string.IsNullOrEmpty(CurrentSketch))
        {
            int wallNumber = GetWallNumber(CurrentSketch);
            CountertopDimensionApplier.ApplyDistance(model, CurrentSketch, LeftDistance, RightDistance, wallNumber, Log);
            Log($"✅ Applied distances for {CurrentSketch}: L={LeftDistance}, R={RightDistance}, Wall={wallNumber}");
            HandleCounterTop.UpdateJsonCountertopDistances(baseName, CurrentSketch, LeftDistance, RightDistance, Log);

        }
        else
        {
            Log("❌ Cannot apply distances. Model or Sketch is null.");
        }
    }
    private int GetWallNumber(string sketchName)
    {
        // Example: "1_2" → wall 1
        if (!string.IsNullOrWhiteSpace(sketchName) && sketchName.Contains("_"))
        {
            var parts = sketchName.Split('_');
            if (int.TryParse(parts[0], out int wallNum))
                return wallNum;
        }
        return 0; // default fallback
    }
    private int? pendingDeleteIndex = null;

    private void DeleteCountertop(int index)
    {
        pendingDeleteIndex = index;
        Log($"🗑️ Delete icon clicked for CT_{stations[index].SketchName}");
        showDeleteConfirmation = true;
    }

    private void ConfirmDelete()
    {
        if (pendingDeleteIndex == null || pendingDeleteIndex < 0 || pendingDeleteIndex >= stations.Count)
        {
            Log("❌ Invalid delete index.");
            showDeleteConfirmation = false;
            return;
        }

        var index = pendingDeleteIndex.Value;
        var sketchToDelete = stations[index].SketchName;

        showDeleteConfirmation = false;
        pendingDeleteIndex = null;

        Log($"🗑️ Confirmed deletion for CT_{sketchToDelete}");

        var model = SwSession.GetActiveModel();
        if (model == null)
        {
            Log("❌ No active SolidWorks model found.");
            return;
        }

        int wallNumber = GetWallNumber(sketchToDelete);

        double fakeDist = 61;
        CountertopDimensionApplier.ApplyDistance(model, sketchToDelete, fakeDist, fakeDist, wallNumber, Log);
        Log($"✏️ Set distances to 61 for {sketchToDelete} before deletion");

        UpdateJsonCountertopDistances(baseName, sketchToDelete, null, null, Log, true);

        string sketchName = $"CT_{sketchToDelete}";
        HandleCounterTop.DeleteSketchByName(model, sketchName, Log);
        Log($"🧹 Deleted sketch {sketchName}");

        stations.RemoveAt(index);
        Log($"❌ Removed station {sketchToDelete} from list");

        if (stations.Count == 0)
        {
            Log("⚠️ No stations left after deletion.");
            return;
        }

        currentStationIndex = Math.Min(index, stations.Count - 1);
        EditCurrentSketch();
        LeftDistance = null;
        RightDistance = null;

        // 🔁 RE-SHOW ALL REMAINING COUNTERTOP BODIES
        try
        {
            string jsonPath = Path.Combine(
                KitchenConfig.Get().BasePath,
                "Kitchenbuilder", "Kitchenbuilder", "JSON",
                $"{baseName}SLD.json"
            );
            string jsonText = File.ReadAllText(jsonPath);
            var jsonDoc = JsonDocument.Parse(jsonText);

            foreach (var wallName in new[] { "Wall1", "Wall2", "Wall3", "Wall4" })
            {
                if (!jsonDoc.RootElement.TryGetProperty(wallName, out JsonElement wall)) continue;
                if (!wall.TryGetProperty("Bases", out JsonElement bases)) continue;

                foreach (var baseItem in bases.EnumerateObject())
                {
                    var baseValue = baseItem.Value;

                    if (!baseValue.TryGetProperty("Visible", out JsonElement vis) || !vis.GetBoolean()) continue;
                    if (!baseValue.TryGetProperty("SketchName", out JsonElement sketchProp)) continue;
                    if (!baseValue.TryGetProperty("Countertop", out JsonElement ctObj)) continue; // Only if still has Countertop

                    string remainingSketch = sketchProp.GetString();
                    string extrudeName = $"Extrude_CT_{remainingSketch}";
                    Log($"🔁 Re-showing: {extrudeName}");
                    Show_Bodies_In_Sld.ShowBody((ModelDoc2)model, extrudeName);
                }
            }

            int saveErr = 0;
            model.Save3((int)swSaveAsOptions_e.swSaveAsOptions_Silent, ref saveErr, ref saveErr);
            Log("✅ Re-saved part after re-showing remaining countertops.");
        }
        catch (Exception ex)
        {
            Log($"❌ Error during re-showing remaining countertops: {ex.Message}");
        }
    }

    void ContinueToSinkCooktop()
    {
        var model = SwSession.GetActiveModel();
        Log("🔵 ContinueToSinkCooktop triggered.");

        if (model == null)
        {
            Log("❌ No active model found when clicking Continue.");
            return;
        }

        try
        {
            var sketchMgr = model.SketchManager;
            if (sketchMgr?.ActiveSketch != null)
            {
                Log("🔚 Exiting active sketch...");
                sketchMgr.InsertSketch(true);
            }

            int saveErrors = 0, saveWarnings = 0;
            bool saved = model.Extension.SaveAs(
                model.GetPathName(),
                (int)swSaveAsVersion_e.swSaveAsCurrentVersion,
                (int)swSaveAsOptions_e.swSaveAsOptions_Silent,
                null,
                ref saveErrors,
                ref saveWarnings
            );

            Log(saved ? "💾 File saved successfully before navigating." :
                        $"❌ Failed to save file. Errors: {saveErrors}, Warnings: {saveWarnings}");
        }
        catch (Exception ex)
        {
            Log($"❌ Error during sketch exit or save: {ex.Message}");
        }

        if (!string.IsNullOrWhiteSpace(baseName))
        {
            Log($"🔍 baseName received: {baseName}");

            // Remove both Option and SLD from baseName safely
            string optionNumber = baseName.Replace("Option", "").Replace("SLD", "").Trim();

            Log($"🧪 Extracted optionNumber = {optionNumber}");

            string route = $"/countertop-material?selected=Option{optionNumber}";
            Log($"🌍 Attempting navigation to: {route}");

            NavManager.NavigateTo(route);
        }
        else
        {
            Log("❌ baseName is null or empty during navigation.");
        }
    }



}