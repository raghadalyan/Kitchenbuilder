@page "/countertop-options"
@using System.IO
@using System.Text.Json
@inject NavigationManager NavManager
@inject SolidWorksSessionService SwSession
@using Kitchenbuilder.Core
@using static Kitchenbuilder.Core.HandleCounterTop
@using SolidWorks.Interop.sldworks
using System.Runtime.InteropServices;
@using SolidWorks.Interop.swconst

<h1 class="title">Adjust Countertop Distances</h1>

@if (baseCount > 0)
{
    <div class="steps">
        @for (int i = 0; i < baseCount; i++)
        {
            <div class="step-circle @(i == currentIndex ? "active" : "")" @onclick="@(() => GoTo(i))">@((i + 1).ToString())</div>
        }
    </div>
    <div class="station-container">
        <div class="station">
            <div class="distance-inputs">
                <label>Distance from Left:</label>
                <input type="number" @bind="baseDistances[currentIndex].Left" />

                <label>Distance from Right:</label>
                <input type="number" @bind="baseDistances[currentIndex].Right" />
            </div>
        </div>
    </div>

    <div class="navigation-buttons">
        <button @onclick="Previous" disabled="@(currentIndex == 0)">⬅ Back</button>
        <button @onclick="Next" disabled="@(currentIndex == baseCount - 1)">Next ➡</button>
    </div>

    <p class="step-indicator">Base @(currentIndex + 1) of @baseCount</p>

    <button class="save-button" @onclick="SaveDistances">💾 Save</button>
}
else
{
    <p>Loading base information...</p>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "base")]
    public string? baseName { get; set; }

    private string currentSketchName = "";
    private int baseCount = 0;
    private int currentIndex = 0;
    private List<HandleCounterTop.BaseDistance> baseDistances = new();

    void Log(string message)
    {
        string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\countertop_debug.txt";
        string timestamped = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}{System.Environment.NewLine}";
        File.AppendAllText(debugPath, timestamped);
    }

    protected override void OnInitialized()
    {
        Log("🟢 OnInitialized started.");
        string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\base_count_debug.txt";
        if (File.Exists(debugPath))
        {
            string content = File.ReadAllText(debugPath);
            Log($"📄 base_count_debug.txt content: {content}");
            if (int.TryParse(content.Split(':').Last().Trim(), out int count))
            {
                baseCount = count;
                Log($"✅ Parsed baseCount = {baseCount}");
                baseDistances = Enumerable.Range(0, baseCount)
                                          .Select(_ => new HandleCounterTop.BaseDistance())
                                          .ToList();
            }
        }

        if (!string.IsNullOrWhiteSpace(baseName))
        {
            Log($"📦 Received baseName = {baseName}");
            string fullBaseName = baseName.EndsWith("SLD") ? baseName : $"{baseName}SLD";
            string jsonPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON", $"{fullBaseName}.json");

            CheckVisibleCountertops.ProcessVisibleCountertops(jsonPath, SwSession);

            try
            {
                string partPath = $@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\temp\{baseName}.SLDPRT";
                ISldWorks swApp = SwSession.GetApp();

                Log("✅ SolidWorks instance launched or connected.");

                int errors = 0, warnings = 0;
                ModelDoc2 model = (ModelDoc2)swApp.OpenDoc6(partPath, (int)swDocumentTypes_e.swDocPART, (int)swOpenDocOptions_e.swOpenDocOptions_Silent, "", ref errors, ref warnings);

                if (model == null)
                {
                    Log($"❌ Failed to open part. Errors={errors}, Warnings={warnings}");
                    return;
                }

                SwSession.SetActiveModel(model);
                LayoutLauncher.StationSketches = GetVisibleSketches(jsonPath);
            }
            catch (Exception ex)
            {
                Log($"❌ Error initializing SolidWorks part: {ex.Message}");
                return;
            }
        }
    }

    private void GoTo(int index)
    {
        Log($"➡ Switching to station index {index}");
        if (index >= 0 && index < baseCount)
        {
            currentIndex = index;
            string fullBaseName = baseName.EndsWith("SLD") ? baseName : $"{baseName}SLD";
            string jsonPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON", $"{fullBaseName}.json");

            ISldWorks swApp = SwSession.GetApp();

            IModelDoc2? model = SwSession.GetActiveModel();

            if (model != null)
            {
                if (LayoutLauncher.StationSketches != null && index < LayoutLauncher.StationSketches.Count)
                {
                    currentSketchName = LayoutLauncher.StationSketches[index];
                    Feature sketchFeat = null;
                    Feature currentFeat = (Feature)model.FirstFeature();

                    while (currentFeat != null)
                    {
                        if (currentFeat.Name == currentSketchName)
                        {
                            sketchFeat = currentFeat;
                            break;
                        }
                        currentFeat = (Feature)currentFeat.GetNextFeature();
                    }

                    if (sketchFeat != null)
                    {
                        bool selected = sketchFeat.Select2(false, -1);
                        Log(selected ? $"✅ Sketch '{currentSketchName}' selected." : $"❌ Failed to select sketch '{currentSketchName}'.");
                    }
                    else
                    {
                        Log($"❌ Sketch '{currentSketchName}' not found.");
                    }
                }
            }

            Log($"📏 Applying dimensions for sketch '{currentSketchName}'");
            CountertopDimensionApplier.ApplyDimensionsFromJson(jsonPath, swApp, currentSketchName);
        }
    }

    private void Previous()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            ActivateSketchForStation(currentIndex, SwSession);
        }
    }

    private void Next()
    {
        if (currentIndex < baseCount - 1)
        {
            currentIndex++;
            ActivateSketchForStation(currentIndex, SwSession);
        }
    }

    private void SaveDistances()
    {
        Log($"💾 Saving distances for baseName = {baseName}, currentSketch = {currentSketchName}");
        if (string.IsNullOrWhiteSpace(baseName)) return;

        string fullBaseName = baseName.EndsWith("SLD") ? baseName : $"{baseName}SLD";
        string jsonPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON", $"{fullBaseName}.json");

        ApplyCountertopData(jsonPath, baseDistances, SwSession);
        ISldWorks swApp = SwSession.GetApp();

        CountertopDimensionApplier.ApplyDimensionsFromJson(jsonPath, swApp, currentSketchName);

        GoTo(currentIndex);
    }
}