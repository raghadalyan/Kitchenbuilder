@page "/countertop-options"
@using System.IO
@using System.Text.Json
@inject NavigationManager NavManager
@inject SolidWorksSessionService SwSession
@using Kitchenbuilder.Core
@using static Kitchenbuilder.Core.HandleCounterTop
@using SolidWorks.Interop.sldworks
@using SolidWorks.Interop.swconst

<h1 class="title">Adjust Countertop Distances</h1>

@if (isLoading)
{
    <div class="loading-container">
        <img src="Images/Loading.gif" alt="Loading..." />
        <p>Loading countertops... please wait</p>
    </div>
}
else
{
    <p class="status-message">
        ✅ Reached Countertop Options Page for: <span style="color:#2c3e50">@baseName</span>
    </p>


    @if (stations.Count > 0)
    {
        <div class="step-indicators">
            @for (int i = 0; i < stations.Count; i++)
            {
                <div @onclick="@(() => GoTo(i))"
                     class="@(i == currentStationIndex ? "step-indicator active" : "step-indicator")">
                    @(i + 1)
                </div>

            }
        </div>

        <div class="station-info">
            <h3>📐 Editing: CT_@CurrentSketch</h3>

            <div class="distance-inputs">
                <label>Distance from Left:</label>
                <input type="number" placeholder="Enter left distance" /><br />

                <label>Distance from Right:</label>
                <input type="number" placeholder="Enter right distance" /><br /><br />

                <button class="save-button">💾 Save</button>
            </div>

        </div>

        <div class="nav-buttons">
            <button @onclick="GoBack" disabled="@(currentStationIndex == 0)">⬅️ Back</button>
            <button @onclick="GoNext" disabled="@(currentStationIndex == stations.Count - 1)">Next ➡️</button>
        </div>

    }
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "base")]
    public string? baseName { get; set; }

    private bool isLoading = true;
    private List<CountertopStation> stations = new();
    private int currentStationIndex = 0;
    private string CurrentSketch => stations.Count > 0 ? stations[currentStationIndex].SketchName : "";

    void Log(string message)
    {
        string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\countertop_debug.txt";
        string timestamped = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}{System.Environment.NewLine}";
        File.AppendAllText(debugPath, timestamped);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await Task.Run(() =>
        {
            Log("🟢 OnInitialized started in /countertop-options");

            if (string.IsNullOrWhiteSpace(baseName))
            {
                Log("❌ baseName is null or empty");
                return;
            }

            string jsonPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON", $"{baseName}SLD.json");
            string partPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\temp", $"temp_{baseName}.SLDPRT");

            Log($"📦 baseName = {baseName}");
            Log($"📄 JSON path = {jsonPath}");
            Log($"🧱 Part path = {partPath}");

            if (!File.Exists(jsonPath) || !File.Exists(partPath))
            {
                Log("❌ JSON or SLDPRT file does not exist.");
                return;
            }

            try
            {
                ISldWorks swApp;
                try { swApp = SwSession.GetApp(); }
                catch (Exception ex)
                {
                    Log($"❌ Failed to get SolidWorks app: {ex.Message}");
                    return;
                }

                int errors = 0, warnings = 0;
                var model = swApp.OpenDoc6(partPath,
                    (int)swDocumentTypes_e.swDocPART,
                    (int)swOpenDocOptions_e.swOpenDocOptions_Silent,
                    "", ref errors, ref warnings) as IModelDoc2;

                if (model == null)
                {
                    Log("❌ Failed to open part.");
                    return;
                }

                SwSession.SetActiveModel(model);
                LayoutLauncher.ArrangeWindows(swApp); // <-- ADD THIS LINE HERE


                string jsonText = File.ReadAllText(jsonPath);
                var jsonDoc = JsonDocument.Parse(jsonText);

                foreach (var wallName in new[] { "Wall1", "Wall2", "Wall3", "Wall4" })
                {
                    if (!jsonDoc.RootElement.TryGetProperty(wallName, out JsonElement wall)) continue;
                    if (!wall.TryGetProperty("Bases", out JsonElement bases)) continue;

                    foreach (var baseItem in bases.EnumerateObject())
                    {
                        var baseValue = baseItem.Value;
                        if (!baseValue.TryGetProperty("Visible", out JsonElement vis) || !vis.GetBoolean()) continue;
                        if (!baseValue.TryGetProperty("SketchName", out JsonElement sketchProp)) continue;

                        string sketchName = sketchProp.GetString();
                        if (string.IsNullOrWhiteSpace(sketchName)) continue;

                        string extrudeName = $"Extrude_CT_{sketchName}";
                        Log($"👁️ Attempting to show countertop body: {extrudeName}");
                        Show_Bodies_In_Sld.ShowBody((ModelDoc2)model, extrudeName);
                    }
                }

                stations = ExtractCountertopStations(jsonPath);
                if (stations.Count > 0)
                {
                    EditCurrentSketch();
                }

                Log("✅ Finished showing all countertop bodies.");
            }
            catch (Exception ex)
            {
                Log($"❌ Exception in OnInitialized: {ex.Message}");
            }
        });

        isLoading = false;
    }

    private void GoNext()
    {
        if (currentStationIndex < stations.Count - 1)
        {
            currentStationIndex++;
            EditCurrentSketch();
        }
    }

    private void GoBack()
    {
        if (currentStationIndex > 0)
        {
            currentStationIndex--;
            EditCurrentSketch();
        }
    }

    private void GoTo(int index)
    {
        if (index >= 0 && index < stations.Count)
        {
            currentStationIndex = index;
            EditCurrentSketch();
        }
    }

    private void EditCurrentSketch()
    {
        var model = SwSession.GetActiveModel();
        if (model != null && !string.IsNullOrEmpty(CurrentSketch))
        {
            string sketchName = $"CT_{CurrentSketch}";
            HandleCounterTop.EditSketchByName(model, sketchName, Log);
        }
    }
}
