@page "/confwalls"
@inject NavigationManager NavManager
@inject SolidWorksSessionService SwSession
@using SolidWorks.Interop.sldworks
@using SolidWorks.Interop.swconst
@using Kitchenbuilder.Core
@using Kitchenbuilder.Core.Models
@using Kitchenbuilder.Core.WallBuilders
@using Kitchenbuilder.Core.Materials
@using System.Text.Json
@using System.IO
@using Microsoft.AspNetCore.Components

<link href="css/confwalls.css" rel="stylesheet" />

<h1 class="title">Wall Confirmation</h1>

<div class="confwalls-page">
    <div class="form-container">
        @if (isLoading)
        {
            <div class="loading-container">
                <p>Please wait a moment while the wall file is being generated...</p>
                <img src="/Images/Loading.gif" alt="Loading" />
                <p>Loading wall preview...</p>
            </div>
        }
        else
        {
            <div class="confirmation-message">
                <p>✅ You can now review the wall preview in SolidWorks.</p>
                <h3>Would you like to apply materials?</h3>
            </div>

            @foreach (var item in materialOptions)
            {
                <div class="material-item">
                    <label>
                        <input type="checkbox" @bind="item.Apply" />
                        Apply material to @item.Label
                    </label>

                    @if (item.Apply)
                    {
                        <div class="material-selection">
                            <label>Type:</label>
                            <select @bind="item.Type">
                                <option value="">-- Select Type --</option>
                                <option>Woods</option>
                                <option>Color</option>
                                <option>Option3</option>
                                <option>Option4</option>
                            </select>
                        </div>

                        @if (item.Type == "Woods" && !item.Saved)
                        {
                            <div class="wood-grid">
                                @foreach (var wood in woodMaterials)
                                {
                                    <div class="wood-item">
                                        <img src="@wood.ImagePath" alt="@wood.Name" class="wood-image" />
                                        <label>
                                            <input type="radio" name="wood_@item.BodyName" value="@wood.Name" @onchange="() => item.Material = wood.Name" checked="@((item.Material == wood.Name))" />
                                            @wood.Name
                                        </label>
                                    </div>
                                }
                            </div>
                        }

                        <div class="save-button-container">
                            <button @onclick="() => SaveMaterial(item)">Save</button>
                        </div>
                    }
                    @if (item.Saved)
                    {
                        <div class="save-button-container">
                            <button @onclick="() => EditMaterialAgain(item)">Edit</button>
                        </div>
                    }
                </div>
            }

            <div class="save-button-container">
                <button class="continue-button" @onclick="ContinueToBaseOptions">Continue</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter][SupplyParameterFromQuery(Name = "count")] public int Count { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "width")] public int FloorWidth { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "length")] public int FloorLength { get; set; }

    private bool isLoading = true;
    private List<int> wallHeights = new();

    class MaterialOption
    {
        public string Label { get; set; } = "";
        public string BodyName { get; set; } = "";
        public bool Apply { get; set; } = false;
        public string Type { get; set; } = "";
        public string Material { get; set; } = "";
        public bool Saved { get; set; } = false;
    }

    class WoodMaterial
    {
        public string Name { get; set; } = "";
        public string ImagePath { get; set; } = "";
    }

    private List<MaterialOption> materialOptions = new();
    private List<WoodMaterial> woodMaterials = new()
    {
        new WoodMaterial { Name = "Balsa", ImagePath = "/Images/Materials/Woods/Balsa.png" },
        new WoodMaterial { Name = "Beech", ImagePath = "/Images/Materials/Woods/Beech.png" },
        new WoodMaterial { Name = "Cedar", ImagePath = "/Images/Materials/Woods/Cedar.png" },
        new WoodMaterial { Name = "Mahogany", ImagePath = "/Images/Materials/Woods/Mahogany.png" },
        new WoodMaterial { Name = "Maple", ImagePath = "/Images/Materials/Woods/Maple.png" },
        new WoodMaterial { Name = "Oak", ImagePath = "/Images/Materials/Woods/Oak.png" },
        new WoodMaterial { Name = "Pine", ImagePath = "/Images/Materials/Woods/Pine.png" },
        new WoodMaterial { Name = "Teak", ImagePath = "/Images/Materials/Woods/Teak.png" }
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_confwalls.txt";

            try
            {
                File.AppendAllText(debugPath, $"🟢 Started /confwalls with Count={Count}, Width={FloorWidth}, Length={FloorLength}\n");

                string jsonPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON\input.json";
                if (!File.Exists(jsonPath))
                {
                    File.AppendAllText(debugPath, $"❌ JSON input file not found at: {jsonPath}\n");
                    return;
                }

                string jsonContent = File.ReadAllText(jsonPath);
                var kitchen = JsonSerializer.Deserialize<Kitchen>(jsonContent);
                if (kitchen == null)
                {
                    File.AppendAllText(debugPath, "❌ Failed to deserialize Kitchen model\n");
                    return;
                }

                wallHeights = kitchen.Walls.Select(w => w.Height).ToList();

                if (SwSession.GetActiveModel() == null)
                {
                    var swAppInstance = (ISldWorks)Activator.CreateInstance(Type.GetTypeFromProgID("SldWorks.Application"));
                    swAppInstance.Visible = true;
                    SwSession.SetApp(swAppInstance);
                    File.AppendAllText(debugPath, "🟢 SolidWorks launched and stored in session\n");
                    LayoutLauncher.ArrangeWindows(swAppInstance);
                }

                switch (kitchen.Walls.Count)
                {
                    case 1: OneWallBuilder.Run(kitchen); break;
                    case 2: TwoWallBuilder.Run(kitchen); break;
                    case 3: ThreeWallBuilder.Run(kitchen); break;
                    case 4: FourWallBuilder.Run(kitchen); break;
                    default:
                        File.AppendAllText(debugPath, $"❌ Invalid wall count: {kitchen.Walls.Count}\n");
                        return;
                }

                File.AppendAllText(debugPath, "✅ Finished building walls\n");

                string filename = $"Wall{kitchen.Walls.Count}_WithFloor.SLDPRT";
                string partPath = Path.Combine(@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\Kitchen", filename);

                if (!File.Exists(partPath))
                {
                    File.AppendAllText(debugPath, $"❌ File not found: {partPath}\n");
                    return;
                }

                var swApp = SwSession.GetApp();
                int errors = 0, warnings = 0;

                var model = swApp.OpenDoc6(
                    partPath,
                    (int)swDocumentTypes_e.swDocPART,
                    (int)swOpenDocOptions_e.swOpenDocOptions_Silent,
                    "", ref errors, ref warnings
                ) as IModelDoc2;

                File.AppendAllText(debugPath, "✅ Model opened successfully\n");

                materialOptions.Add(new MaterialOption { Label = "Floor", BodyName = "Boss-Extrude1" });
                if (kitchen.Walls.Count >= 1) materialOptions.Add(new MaterialOption { Label = "Wall 1", BodyName = "Wall1" });
                if (kitchen.Walls.Count >= 2) materialOptions.Add(new MaterialOption { Label = "Wall 2", BodyName = "WindowSlot12" });

                File.AppendAllText(debugPath, $"🟢 Material options initialized for {materialOptions.Count} items\n");
            }
            catch (Exception ex)
            {
                File.AppendAllText(@"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_confwalls.txt", $"❌ Exception: {ex.Message}\n{ex.StackTrace}\n");
            }
        });

        isLoading = false;
    }

    private void ContinueToBaseOptions()
    {
        var swApp = SwSession.GetApp();
        if (swApp != null)
        {
            swApp.FrameState = (int)swWindowState_e.swWindowMaximized;
            swApp.SendMsgToUser2("Returning to base configuration...",
                (int)swMessageBoxIcon_e.swMbInformation,
                (int)swMessageBoxBtn_e.swMbOk);
        }

        NavManager.NavigateTo("/base");
    }

    private void SaveMaterial(MaterialOption item)
    {
        var swApp = SwSession.GetApp();
        string debugPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_confwalls.txt";

        if (string.IsNullOrWhiteSpace(item.Material))
        {
            File.AppendAllText(debugPath, $"⚠ Material not selected for {item.BodyName}\n");
            return;
        }

        bool result = EditMaterial.ApplyMaterialToBody(swApp, item.BodyName, item.Material, "");
        item.Saved = result;

        File.AppendAllText(debugPath, result
            ? $"✅ Applied material '{item.Material}' to {item.BodyName}\n"
            : $"❌ Failed to apply material '{item.Material}' to {item.BodyName}\n");
    }

    private void EditMaterialAgain(MaterialOption item)
    {
        item.Saved = false;
    }
}