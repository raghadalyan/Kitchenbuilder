@page "/base"
@using System.IO
@using System.Text.Json
@using Kitchenbuilder.Core.Models
@using Kitchenbuilder.Core.Services.BaseServices
@inject NavigationManager NavManager

<link href="css/confwalls.css" rel="stylesheet" />


<div class="base-page">
    <div class="form-container">
        @if (isLoading)
        {
            <div class="loading-container">
                <img src="/Images/Loading.gif" alt="Loading" />
                <p>Please wait patiently while we prepare the kitchen base...</p>
            </div>
        }
        else
        {
            <p>✅ The kitchen base was created successfully.</p>
            <button class="continue-button" @onclick="Continue">Continue</button>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string Status = "";
    private string debugPath => Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Output", "debug_base.txt");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100); // Ensure loading UI is rendered
            await BuildBase();
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task BuildBase()
    {
        try
        {
            Log("🟢 Started /base page logic");

            string folder = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Kitchenbuilder", "JSON");


            string inputPath = Path.Combine(folder, "input.json");
            Log($"📁 Looking for input.json at: {inputPath}");

            if (!File.Exists(inputPath))
            {
                Status = "❌ input.json not found.";
                Log("❌ input.json not found.");
                return;
            }

            string json = await File.ReadAllTextAsync(inputPath);
            Log("📖 Read input.json successfully");

            var kitchen = JsonSerializer.Deserialize<Kitchen>(json);
            if (kitchen == null)
            {
                Status = "❌ Failed to deserialize input.json.";
                Log("❌ Failed to deserialize input.json.");
                return;
            }

            Log("✅ Deserialized kitchen object successfully");

            var generatedBase = BaseCreator.CreateBase(kitchen);
            Log("🏗 Base generated by BaseCreator");

            kitchen.Base = generatedBase;

            string updatedJson = JsonSerializer.Serialize(kitchen, new JsonSerializerOptions { WriteIndented = true });
            await File.WriteAllTextAsync(inputPath, updatedJson);
            Log("💾 Updated input.json with new Base section");

            Status = "✅ Base created successfully!";
            Log("✅ Base creation complete.");
        }
        catch (Exception ex)
        {
            Status = $"❌ Error: {ex.Message}";
            Log($"❌ Exception occurred: {ex.Message}\n{ex.StackTrace}");
        }
    }

    private void Continue()
    {
        NavManager.NavigateTo("/base-options");
    }

    private void Log(string message)
    {
        File.AppendAllText(debugPath, $"{DateTime.Now:HH:mm:ss} - {message}\n");
    }
}