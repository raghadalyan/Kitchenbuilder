@page "/sink-cooktop-options"
@using Kitchenbuilder.Core
@using Microsoft.AspNetCore.Components
@inject SolidWorksSessionService SwSession
@inject Kitchenbuilder.Core.SolidWorksSessionService SwSession
@using SolidWorks.Interop.sldworks
@using SolidWorks.Interop.swconst
@using System.Text.Json;

<div class="sink-cooktop-page">
    <div class="card-container">
        <h3 class="option-title">Choose your preferred sink & cooktop layout:</h3>

        @if (IsLoading)
        {
            <p>Processing countertop placements...</p>
            <img src="/Images/Loading.gif" alt="Loading..." style="width: 100px;" />
        }
        else if (ImageFolders.Any())
        {
            <div class="image-grid">
                @foreach (var folder in ImageFolders)
                {
                    <div class="image-box">


                        <img src="@folder.CurrentImagePath"
                             @onclick="() => NextImage(folder)"
                             class="preview-img"
                             style="cursor: pointer;" />

                        <p>@folder.Description</p>
                        <label style="display: block; text-align: center;">
                            <input type="radio"
                                   name="layoutChoice"
                                   value="@folder.Index"
                                   checked="@(SelectedIndex == folder.Index)"
                                   @onchange="() => SelectedIndex = folder.Index" />

                        </label>
                    </div>

                }
            </div>
        }
        else
        {
            <p>No layout suggestions found.</p>
        }
    </div>
    <button class="btn btn-success" @onclick="GoToHandleCabinet" disabled="@(!ImageFolders.Any() || SelectedIndex == -1)">
        Continue
    </button>

</div>


@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Parameter]
    [SupplyParameterFromQuery(Name = "option")]
    public string? SelectedOption { get; set; }

    private bool IsLoading = true;

    private List<ImageFolder> ImageFolders = new();
    private int SelectedIndex = -1;

    protected override void OnInitialized()
    {
        Console.WriteLine($"➡️ Navigated with option: {SelectedOption}");

        if (!string.IsNullOrWhiteSpace(SelectedOption) && SelectedOption.StartsWith("Option"))
        {
            SelectedOption = SelectedOption.Replace("Option", "");
        }

        if (int.TryParse(SelectedOption, out int optionNum))
        {
            var model = SwSession.GetActiveModel();

            if (model == null)
            {
                Console.WriteLine("❌ No active model found in SwSession.");
                IsLoading = false;
                return;
            }

            var relevantCountertops = IdentifyRelevantCountertops.Process(optionNum);
            AnalyzeSinkCooktop.Process(relevantCountertops, optionNum, model);
            // Close the current model (temp_Option*.SLDPRT)
            SwSession.GetApp().CloseDoc(model.GetTitle());
            LoadImageFolders(optionNum);
        }
        else
        {
            Console.WriteLine("❌ Invalid option parameter after cleanup.");
        }

        IsLoading = false;
    }
    private void LoadImageFolders(int optionNum)
    {
        int layoutIndex = 1;
        var sinkCooktopPath = Path.Combine(AppContext.BaseDirectory, "wwwroot", "Output", "Sink_Cooktop");
        if (!Directory.Exists(sinkCooktopPath)) return;

        var optionDirs = Directory.GetDirectories(sinkCooktopPath, "Option*");

        foreach (var dir in optionDirs)
        {
            string folderName = Path.GetFileName(dir);
            string webPath = $"/Output/Sink_Cooktop/{folderName}";
            var images = Directory.GetFiles(dir, "*.png");

            if (images.Length > 0)
            {
                ImageFolders.Add(new ImageFolder
                    {
                        Index = layoutIndex++,
                        Description = $"{folderName} Layout",
                        ImageWebPaths = images.Select(f => Path.Combine(webPath, Path.GetFileName(f)).Replace("\\", "/")).ToArray(),
                        CurrentIndex = 0
                    });
            }
        }
    }




    private void NextImage(ImageFolder folder)
    {
        folder.CurrentIndex = (folder.CurrentIndex + 1) % folder.ImageWebPaths.Length;
    }

    private class ImageFolder
    {
        public int Index { get; set; }
        public string Description { get; set; } = string.Empty;
        public string[] ImageWebPaths { get; set; } = Array.Empty<string>();
        public int CurrentIndex { get; set; }
        public string CurrentImagePath => ImageWebPaths.ElementAtOrDefault(CurrentIndex) ?? string.Empty;
    }

    private void GoToHandleCabinet()
    {
        if (string.IsNullOrWhiteSpace(SelectedOption) || SelectedIndex == -1)
        {
            Log("⚠️ Invalid selection: No option or index chosen.");
            return;
        }

        int optionNum = int.Parse(SelectedOption);

        string layoutFile = Path.Combine(
            KitchenConfig.Get().BasePath,
            "Kitchenbuilder", "Output", "temp", "Layout", $"Layout{SelectedIndex}.sldprt");

        string targetFile = Path.Combine(
            KitchenConfig.Get().BasePath,
            "Kitchenbuilder", "Output", "temp", $"temp_Option{optionNum}.SLDPRT");

        try
        {
            var swApp = SwSession.GetApp();
            Log($"🔒 Closing SolidWorks file: temp_Option{optionNum}.SLDPRT");
            swApp.CloseDoc($"temp_Option{optionNum}.SLDPRT");
            Thread.Sleep(300);

            if (File.Exists(layoutFile))
            {
                Log($"📁 Trying to copy: {layoutFile} → {targetFile}");
                bool success = TryCopyWithRetries(layoutFile, targetFile);

                if (!success)
                {
                    Log($"❌ Failed to copy layout file after retries: {layoutFile}");
                    return;
                }
            }
            else
            {
                Log($"❌ Layout file not found: {layoutFile}");
                return;
            }

            int errs = 0, warns = 0;
            Log($"📂 Reopening file in SolidWorks: {targetFile}");
            var model = (IModelDoc2)swApp.OpenDoc6(
                targetFile,
                (int)swDocumentTypes_e.swDocPART,
                (int)swOpenDocOptions_e.swOpenDocOptions_Silent,
                "",
                ref errs,
                ref warns
            );

            // ✅ Set the reopened model as the active one
            SwSession.SetActiveModel(model);
            string layoutFolder = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Output", "temp", "Layout");

            try
            {
                string sourceJson = Path.Combine(layoutFolder, $"Layout{SelectedIndex}.json");
                string optionJsonPath = Path.Combine(
                    KitchenConfig.Get().BasePath,
                    "Kitchenbuilder", "Kitchenbuilder", "JSON", $"Option{optionNum}SLD.json");

                if (!File.Exists(sourceJson))
                {
                    Log($"⚠️ Layout JSON not found: {sourceJson}");
                }
                else
                {
                    Log($"📥 Reading layout JSON from: {sourceJson}");
                    var layoutJson = File.ReadAllText(sourceJson);
                    var layoutObj = JsonSerializer.Deserialize<JsonElement>(layoutJson);

                    if (layoutObj.TryGetProperty("Sink", out var sink) && layoutObj.TryGetProperty("Cooktop", out var cooktop))
                    {
                        Dictionary<string, object> finalData;

                        if (File.Exists(optionJsonPath))
                        {
                            var existingJson = File.ReadAllText(optionJsonPath);
                            finalData = JsonSerializer.Deserialize<Dictionary<string, object>>(existingJson) ?? new();
                        }
                        else
                        {
                            finalData = new();
                        }

                        finalData["Sink"] = sink;
                        finalData["Cooktop"] = cooktop;

                        var updatedJson = JsonSerializer.Serialize(finalData, new JsonSerializerOptions { WriteIndented = true });
                        File.WriteAllText(optionJsonPath, updatedJson);
                        Log($"💾 Sink & Cooktop added to: {optionJsonPath}");
                    }
                    else
                    {
                        Log("❌ Missing Sink or Cooktop in layout JSON.");
                    }
                }
            }
            catch (Exception ex)
            {
                Log($"❌ Error while extracting Sink & Cooktop JSON: {ex.Message}");
            }

            // 🗑️ Delete Layout folder after reusing a layout
            if (Directory.Exists(layoutFolder))
            {
                TryDeleteFolderWithRetries(layoutFolder);
                Log($"🗑️ Deleted layout folder: {layoutFolder}");
            }

            string sinkCooktopDir = Path.Combine(AppContext.BaseDirectory, "wwwroot", "Output", "Sink_Cooktop");

            if (Directory.Exists(sinkCooktopDir))
            {
                Directory.Delete(sinkCooktopDir, true);
                Log($"🗑️ Deleted folder: {sinkCooktopDir}");
            }

            Log("✅ Navigation to /handle-cabinet");
        }
        catch (Exception ex)
        {
            Log($"❌ Error in GoToHandleCabinet: {ex.Message}");
        }

        Navigation.NavigateTo($"/handle-cabinet?option={SelectedOption}");
    }

    private static readonly string LogPath = Path.Combine(
        KitchenConfig.Get().BasePath,
        "Kitchenbuilder", "Output", "Sink-Cooktop", "GoToHandleCabinet_Log.txt"
    );

    private void Log(string msg)
    {
        Directory.CreateDirectory(Path.GetDirectoryName(LogPath)!);
        File.AppendAllText(LogPath, $"[{DateTime.Now:HH:mm:ss}] {msg}{System.Environment.NewLine}");
    }

    private bool TryCopyWithRetries(string source, string destination, int maxRetries = 10, int delayMs = 200)
    {
        for (int i = 0; i < maxRetries; i++)
        {
            try
            {
                File.Copy(source, destination, overwrite: true);
                return true;
            }
            catch (IOException)
            {
                Thread.Sleep(delayMs);
            }
        }

        return false;
    }

    private bool TryDeleteFolderWithRetries(string folderPath, int maxRetries = 10, int delayMs = 300)
    {
        for (int i = 0; i < maxRetries; i++)
        {
            try
            {
                if (Directory.Exists(folderPath))
                {
                    Directory.Delete(folderPath, true);
                    return true;
                }
                return true; // already deleted
            }
            catch (IOException)
            {
                Thread.Sleep(delayMs);
            }
            catch (UnauthorizedAccessException)
            {
                Thread.Sleep(delayMs);
            }
        }

        return false;
    }

}


