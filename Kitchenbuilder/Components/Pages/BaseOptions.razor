@page "/base-options"
@using System.IO
@using Microsoft.AspNetCore.Components


<link href="css/BaseOptions.css" rel="stylesheet" />

<div class="base-options-page">
    <div class="base-options-container">
        <h1>Choose your preferred base:</h1>

        <div class="option-container">
            @foreach (var opt in optionNames)
            {
                    <div class="option-item">
                    @if (optionImages.ContainsKey(opt) && optionImages[opt].Length > 0)
                    {
                        var fileName = Path.GetFileName(optionImages[opt][currentImageIndex[opt]]);
                                <img src="@($"/Output/{opt}/{fileName}")"
                                     @onclick="() => NextImage(opt)"
                                     class="option-image"
                                     alt="@opt" />
                    }
                        <div class="radio-group">
                            <input type="radio"
                                   id="@($"opt-{opt}")"
                                   name="optionSelect"
                                   value="@opt"
                                   checked="@((selectedOption == opt))"
                                   @onchange="() => OnOptionSelected(opt)" />
                            <label for="@($"opt-{opt}")">@opt</label>
                        </div>
                    </div>
            }
        </div>

        @if (!string.IsNullOrEmpty(selectedOption))
        {
                <div class="confirmation-box">
                    <p>You selected: <strong>@selectedOption</strong></p>
                    <button class="confirm-button" @onclick="ConfirmSelection">Continue</button>
                </div>
        }
    </div>
</div>

@* @if (!string.IsNullOrEmpty(selectedOption)) *@
@* { *@
@*     <div class="confirmation-box"> *@
@*         <p>You selected: <strong>@selectedOption</strong></p> *@
@*         <button class="confirm-button" @onclick="ConfirmSelection">Continue</button> *@
@*     </div> *@
@* } *@



@code {
    private List<string> optionNames = new();
    private string selectedOption = string.Empty;

    private Dictionary<string, string[]> optionImages = new();
    private Dictionary<string, int> currentImageIndex = new();

    [Inject] private NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery(Name = "next")]
    public string NextStep { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            var logPath = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\debug_log.txt";
            var baseDir = @"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\bin\Debug\net8.0-windows10.0.19041.0\win10-x64\AppX\wwwroot\Output";
            optionNames = Directory.GetDirectories(baseDir)
                       .Select(Path.GetFileName)
                       .Where(name => name?.ToLower().StartsWith("option") ?? false)
                       .OrderBy(name => name)
                       .ToList();
            var logBuilder = new System.Text.StringBuilder();
            logBuilder.AppendLine("🧠 Log started: " + DateTime.Now);
            logBuilder.AppendLine("🔎 Base directory: " + baseDir);

            foreach (var option in optionNames)
            {
                var optionDir = Path.Combine(baseDir, option);
                logBuilder.AppendLine($"📂 Checking option: {option}");

                if (Directory.Exists(optionDir))
                {
                    var images = Directory.GetFiles(optionDir, "*.png").OrderBy(f => f).ToArray();
                    if (images.Length > 0)
                    {
                        optionImages[option] = images;
                        currentImageIndex[option] = 0;
                        foreach (var img in images)
                        {
                            logBuilder.AppendLine("    🖼 " + img);
                        }
                    }
                    else
                    {
                        logBuilder.AppendLine($"⚠ No PNG images found in {optionDir}");
                    }
                }
                else
                {
                    logBuilder.AppendLine($"❌ Directory does not exist: {optionDir}");
                }
            }

            Directory.CreateDirectory(Path.GetDirectoryName(logPath)!);
            File.WriteAllText(logPath, logBuilder.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error during initialization: " + ex.Message);
        }
    }

    private void OnOptionSelected(string opt)
    {
        selectedOption = opt;
        StateHasChanged();
    }

    private void NextImage(string option)
    {
        if (optionImages.ContainsKey(option))
        {
            currentImageIndex[option] = (currentImageIndex[option] + 1) % optionImages[option].Length;
        }
    }
    private void ConfirmSelection()
    {
        if (!string.IsNullOrEmpty(selectedOption))
        {
            try
            {
                // 🔸 Delete other temp SLDPRT files
                string tempFolder = @"C:\Users\chouse\Downloads\Kitchenbuilder\Output\temp";
                string keepFile = $"temp_{selectedOption}.SLDPRT";

                if (Directory.Exists(tempFolder))
                {
                    var files = Directory.GetFiles(tempFolder, "temp_Option*.SLDPRT");
                    foreach (var file in files)
                    {
                        if (!file.EndsWith(keepFile, StringComparison.OrdinalIgnoreCase))
                        {
                            File.Delete(file);
                        }
                    }
                }

                // 🔸 Delete unrelated JSON files
                string jsonFolder = @"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON";
                string keepJson1 = $"{selectedOption}.json";
                string keepJson2 = $"{selectedOption}SLD.json";

                if (Directory.Exists(jsonFolder))
                {
                    var allJsons = Directory.GetFiles(jsonFolder, "*.json");
                    foreach (var file in allJsons)
                    {
                        var name = Path.GetFileName(file);
                        if (
                            !name.Equals("input.json", StringComparison.OrdinalIgnoreCase) &&
                            !name.Equals(keepJson1, StringComparison.OrdinalIgnoreCase) &&
                            !name.Equals(keepJson2, StringComparison.OrdinalIgnoreCase))
                        {
                            File.Delete(file);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Error while cleaning files: " + ex.Message);
            }

            // Clear state and move on
            optionImages.Clear();
            currentImageIndex.Clear();
            StateHasChanged();

            var targetPage = string.IsNullOrEmpty(NextStep) ? "base-approval" : NextStep;
            Navigation.NavigateTo($"/{targetPage}?selected={selectedOption}");
        }
    }


}