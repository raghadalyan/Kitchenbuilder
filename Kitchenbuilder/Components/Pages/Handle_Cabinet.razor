@page "/handle-cabinet"
@using System.Text.Json
@using Kitchenbuilder.Core
@inject IJSRuntime JS
@inject SolidWorksSessionService SwSession
@using Kitchenbuilder.Core.Models
@using SolidWorks.Interop.sldworks

<div class="cabinet-page">
    <div class="container">
        <div class="panel-box">
            <h1>Cabinet Stations</h1>

            @if (stations.Count > 0 && currentIndex >= 0)
            {
                <div class="station-circles">
                    @for (int i = 0; i < stations.Count; i++)
                    {
                        <button class="circle-btn @(i == currentIndex ? "active" : "")" @onclick="@(() => SelectStation(i))">
                            @(i + 1)
                        </button>
                    }
                </div>

                <!-- ✅ NEW WRAPPER -->
                <div class="station-wrapper">
                    <div class="station-info">

                        <div class="station-reminder-box inline" style="justify-content: space-between;">
                            <span><strong>From:</strong> @stations[currentIndex].StationStart</span>
                            <span><strong>To:</strong> @stations[currentIndex].StationEnd</span>
                            <span><strong>Length:</strong> @(stations[currentIndex].StationEnd - stations[currentIndex].StationStart) cm</span>
                        </div>

                        <h3>Station @(currentIndex + 1): @stations[currentIndex].BaseName</h3>
                        <p>From @stations[currentIndex].StationStart to @stations[currentIndex].StationEnd</p>

                        <div class="action-buttons">
                            <button class="action-btn" @onclick="() => showAddCabinet = !showAddCabinet">➕ Add Cabinet</button>
                            <button class="action-btn" @onclick="AddSpace">➕ Add Space</button>
                        </div>

                        @if (showAddCabinet)
                        {
                            <div class="add-cabinet-box">


                                @if (RequiresFullBox())
                                {
                                    <div class="form-row">
                                        <label><input type="checkbox" @bind="isSequence" /> Sequence of copies</label>
                                    </div>

                                    @if (isSequence)
                                    {
                                        <div class="form-row">
                                            <label>
                                                Number of copies:
                                                <input type="number" min="2" @bind="copiesCount" />
                                            </label>
                                        </div>
                                    }

                                    <div class="form-row">
                                        <label>
                                            Width:
                                            <input type="number" min="1" @bind="width" />
                                        </label>
                                    </div>

                                    @if (!stations[currentIndex].HasCountertop)
                                    {
                                        <div class="form-row">
                                            <label>
                                                Height:
                                                <input type="number" min="1" @bind="height" />
                                            </label>
                                        </div>
                                    }

                                    <div class="form-row">
                                        <label><input type="checkbox" @bind="hasDrawers" /> Has drawers</label>
                                    </div>

                                    @if (hasDrawers)
                                    {
                                        <div class="form-row">
                                            <label>
                                                Number of drawers:
                                                <input type="number" min="2" @bind="drawerCount" />
                                            </label>
                                        </div>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                                    {
                                        <div class="form-row" style="color: red; font-weight: bold; margin-bottom: 10px;">
                                            @errorMessage
                                        </div>
                                    }

                                    <div class="form-row">
                                        <button class="apply-btn" @onclick="OnApplyCabinet">✅ Apply</button>
                                    </div>
                                }
                                else if (RequiresCounterTopBox())
                                {
                                    <label>
                                        Width:
                                        <input type="number" min="1" @bind="width" />
                                    </label>

                                    <label>
                                        <input type="checkbox" @bind="hasDrawers" /> Has drawers
                                    </label>

                                    @if (hasDrawers)
                                    {
                                        <label>
                                            Number of drawers:
                                            <input type="number" min="2" @bind="drawerCount" />
                                        </label>
                                    }
                                }
                            </div>
                        }

    <Edit_Lower_Cabinet Station="stations[currentIndex]" OptionNumber="OptionNum" />
                        </div>
                </div>

                <div class="nav-buttons">
                    <button @onclick="PreviousStation" disabled="@(currentIndex == 0)">⬅ Back</button>
                    <button @onclick="NextStation" disabled="@(currentIndex == stations.Count - 1)">Next ➡</button>
                </div>

                <div class="station-progress">
                    <div class="progress-bar">
                        <div class="progress-filled" style="width:@GetFillPercentage(stations[currentIndex])%"></div>
                    </div>
                    <p>@GetFillPercentage(stations[currentIndex])% filled</p>
                </div>

                <div class="nav-buttons">
                    <button class="continue-btn" @onclick="GoToUpperCabinet">Continue to Upper Cabinets</button>
                </div>
            }
            else
            {
                <p>Loading stations...</p>
            }
        </div>
    </div>
</div>




@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "option")]
    public string? SelectedOption { get; set; }

    private int OptionNum;
    private List<StationInfo> stations = new();
    private int currentIndex = 0;
    private IModelDoc2 swModel;

    private bool showAddCabinet = false;
    private bool isSequence = false;
    private int copiesCount = 2;
    private int width = 1;
    private int height = 70;
    private bool hasDrawers = false;
    private int drawerCount = 2;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        OptionNum = int.TryParse(SelectedOption, out var result) ? result : 1;
        Log($"➡️ Selected Option: {OptionNum}");

        string jsonPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Kitchenbuilder", "JSON", $"Option{OptionNum}SLD_stations.json");
        Log($"📄 JSON path: {jsonPath}");

        if (!File.Exists(jsonPath))
        {
            Log("❌ JSON file does not exist. Attempting to calculate it...");

            try
            {
                string originalJsonPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Kitchenbuilder", "JSON", $"Option{OptionNum}SLD.json");
                if (File.Exists(originalJsonPath))
                {
                    var calculatedStations = CalculateStationsCabinets.Calculate(originalJsonPath);
                    var options = new JsonSerializerOptions { WriteIndented = true };
                    await File.WriteAllTextAsync(jsonPath, JsonSerializer.Serialize(calculatedStations, options));
                    Log($"✅ Calculated and saved station file to: {jsonPath}");
                }
                else
                {
                    Log($"❌ Original Option{OptionNum}SLD.json file not found at: {originalJsonPath}");
                }
            }
            catch (Exception ex)
            {
                Log($"❌ Error during calculation: {ex.Message}");
            }
        }

        if (File.Exists(jsonPath))
        {
            try
            {
                var json = await File.ReadAllTextAsync(jsonPath);
                Log("📥 JSON file read successfully.");
                stations = JsonSerializer.Deserialize<List<StationInfo>>(json) ?? new();
                Log($"✅ Loaded {stations.Count} stations.");
            }
            catch (Exception ex)
            {
                Log($"❌ Error reading or deserializing JSON: {ex.Message}");
            }
        }

        else
        {
            Log("❌ JSON file does not exist.");
        }

        swModel = SwSession.GetActiveModel();
        if (swModel != null)
        {
            Log("✅ Active SolidWorks model found.");
        }
        else
        {
            Log("❌ No active SolidWorks model.");
        }

        if (swModel != null && stations.Count > 0)
        {
            MoveBetweenStations.SelectStation(0, stations, ref currentIndex, swModel);
            Log($"🔁 Moved to station 0.");
        }
        else
        {
            Log("⚠️ Initialization skipped: no stations or model.");
        }
    }

    void SelectStation(int index)
    {
        MoveBetweenStations.SelectStation(index, stations, ref currentIndex, swModel);
    }

    void PreviousStation()
    {
        MoveBetweenStations.PreviousStation(stations, ref currentIndex, swModel);
    }

    void NextStation()
    {
        MoveBetweenStations.NextStation(stations, ref currentIndex, swModel);
    }

    void AddSpace()
    {
        Console.WriteLine($"Adding space at station {currentIndex + 1}");
    }

    bool RequiresFullBox()
    {
        return !stations[currentIndex].BaseName.ToLower().Contains("counter");
    }

    bool RequiresCounterTopBox()
    {
        return !RequiresFullBox();
    }

    string GetWallNumber(string baseName)
    {
        if (baseName.StartsWith("fridge_base") && baseName.Length > 11)
            return baseName.Substring(11);
        if (baseName.Contains("_"))
            return baseName.Split('_')[0];
        return "?";
    }

    string GetBaseNumber(string baseName)
    {
        if (baseName.StartsWith("fridge_base"))
            return "Fridge";
        if (baseName.Contains("_"))
            return baseName.Split('_')[1];
        return "?";
    }

    async Task OnApplyCabinet()
    {
        int copies = isSequence ? copiesCount : 1;

        if (width < 5)
        {
            errorMessage = "❌ Width must be at least 5 cm.";
            return;
        }
        if (height < 5)
        {
            errorMessage = "❌ Height must be at least 5 cm.";
            return;
        }

        string jsonPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Kitchenbuilder", "JSON", $"Option{OptionNum}SLD_stations.json");

        bool canAdd = ApplyCabinet.CanAddCabinet(jsonPath, currentIndex, width, copies);

        if (!canAdd)
        {
            errorMessage = "❌ Cannot add cabinet: exceeds base width.";
            return;
        }

        ApplyCabinet.AddCabinet(jsonPath, currentIndex, width, hasDrawers, height, drawerCount, copies, swModel);

        errorMessage = "";

        // Reset state to default after successful apply
        width = 1;
        height = 70; // <-- reset to your preferred default
        hasDrawers = false;
        drawerCount = 2;
        isSequence = false;
        copiesCount = 2;

        if (File.Exists(jsonPath))
        {
            var updatedJson = await File.ReadAllTextAsync(jsonPath);
            stations = JsonSerializer.Deserialize<List<StationInfo>>(updatedJson) ?? new();
        }
    }



    int GetFillPercentage(StationInfo station)
    {
        if (station == null || station.StationEnd <= station.StationStart)
            return 0;

        int totalWidth = station.StationEnd - station.StationStart;
        int usedWidth = station.Cabinets?.Sum(c => c.Width) ?? 0;

        int percentage = (int)((double)usedWidth / totalWidth * 100);
        return Math.Min(percentage, 100);
    }
    void Log(string message)
{
        string debugPath = Path.Combine(KitchenConfig.Get().BasePath, "Kitchenbuilder", "Output", "Debug", "HandleCabinet_Debug.txt");
        Directory.CreateDirectory(Path.GetDirectoryName(debugPath)!);
    File.AppendAllText(debugPath, $"[{DateTime.Now:HH:mm:ss}] {message}{System.Environment.NewLine}");

}
    [Inject]
    private NavigationManager NavManager { get; set; }

    void GoToUpperCabinet()
    {
        NavManager.NavigateTo($"/upper-cabinets?option={OptionNum}");
    }

}
