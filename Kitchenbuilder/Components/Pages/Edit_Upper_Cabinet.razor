@using Kitchenbuilder.Core.Models
@using System.Text.Json
@using System.IO

@code {
    [Parameter] public int OptionNum { get; set; }
    [Parameter] public int WallNumber { get; set; }

    private WallCabinetWrapper? data;
    private string wallKey => $"Wall{WallNumber}";
    private string jsonPath => $@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON\UpperCabinets.json";

    protected override void OnParametersSet()
    {
        if (!File.Exists(jsonPath)) return;

        try
        {
            var json = File.ReadAllText(jsonPath);
            var all = JsonSerializer.Deserialize<Dictionary<string, WallCabinetWrapper>>(json);
            if (all != null && all.TryGetValue(wallKey, out var wrapper))
                data = wrapper;
        }
        catch { data = null; }
    }
}

@if (data != null)
{
    <div class="edit-upper-box">
        <h4 style="color: #5a3e1b;">📦 Added Items</h4>
        <div class="upper-icon-grid">

            @* ✅ Render Cabinet Icons *@
            @foreach (var cab in data.Cabinets)
            {
                <div class="upper-tooltip-wrapper">
                    <img src="Images/cabinet.gif" class="upper-icon" />
                    <div class="upper-tooltip">
                        <strong>Cabinet</strong><br />
                        Width: @cab.Width cm<br />
                        Height: @cab.Height cm<br />
                        Depth: @cab.Depth cm<br />
                        DistanceX: @cab.DistanceX cm<br />
                        DistanceY: @cab.DistanceY cm
                    </div>
                </div>
            }

            @* ✅ Render Space Icons *@
            @foreach (var sp in data.Spaces)
            {
                var cleanedType = sp.Type?.Trim() ?? "null";
                var icon = cleanedType switch
                {
                    "Microwave" => "microwave.gif",
                    "Oven" => "Oven.gif",
                    "Range Hood" => "Range Hood.gif",
                    "DishWasher" => "dishwasher.gif",
                    _ => "other.png"
                };

                var imagePath = $"Images/{icon}";

                <div class="upper-tooltip-wrapper">
                    <img src="@imagePath" class="upper-icon" />
                    <div class="upper-tooltip">
                        <strong>@sp.Type</strong><br />
                        Width: @sp.Width cm<br />
                        Height: @sp.Height cm<br />
                        DistanceX: @sp.DistanceX cm<br />
                        DistanceY: @sp.DistanceY cm
                    </div>
                </div>
            }

        </div>
    </div>
}

