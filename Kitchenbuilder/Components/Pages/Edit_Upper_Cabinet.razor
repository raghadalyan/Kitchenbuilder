@using Kitchenbuilder.Core.Models
@using System.Text.Json
@using System.IO
@using Kitchenbuilder.Core
@using Kitchenbuilder.Core.Models
@inject SolidWorksSessionService SwSession
@using SolidWorks.Interop.sldworks

@code {
    [Parameter] public int OptionNum { get; set; }
    [Parameter] public int WallNumber { get; set; }

    private WallCabinetWrapper? data;
    private string wallKey => $"Wall{WallNumber}";
    private string jsonPath => $@"C:\Users\chouse\Downloads\Kitchenbuilder\Kitchenbuilder\JSON\UpperCabinets.json";

    protected override void OnParametersSet()
    {
        if (!File.Exists(jsonPath)) return;

        try
        {
            var json = File.ReadAllText(jsonPath);
            var all = JsonSerializer.Deserialize<Dictionary<string, WallCabinetWrapper>>(json);
            if (all != null && all.TryGetValue(wallKey, out var wrapper))
                data = wrapper;
        }
        catch { data = null; }
    }
    void SelectUpperCabinet(CabinetInfo cab)
    {
        string suffix = cab.SketchName?.Replace("Sketch_Cabinet", "") ?? "";
        string bodyName = $"Extrude_Drawers{suffix}";

        var model = SwSession.GetActiveModel();
        SelectBody.SelectByName(model, bodyName);
    }

    void SelectUpperSpace(Space sp)
    {
        string? type = sp.Type?.Trim();
        string bodyName = type switch
        {
            "Microwave" => "Microwave1",
            "Oven" => "Oven1",
            "Range Hood" => "Range Hood1",
            _ => null
        };

        if (bodyName != null)
        {
            var model = SwSession.GetActiveModel();
            SelectBody.SelectByName(model, bodyName);
        }
    }

}

@if (data != null)
{
    <div class="edit-upper-box">
        <h4 style="color: #5a3e1b;">📦 Added Items</h4>
        <div class="upper-icon-grid">

          
            @foreach (var cab in data.Cabinets)
            {
                <div class="upper-tooltip-wrapper">
                    <img src="Images/cabinet.gif" class="upper-icon" @onclick="() => SelectUpperCabinet(cab)" />



                    <div class="upper-tooltip">
                        <div class="upper-corner-icons">
                            <img src="Images/edit.png" class="upper-corner-icon" />
                            <img src="Images/Delete.png" class="upper-corner-icon" />
                        </div>
                        <strong>Cabinet</strong><br />
                        Width: @cab.Width cm<br />
                        Height: @cab.Height cm<br />
                        Depth: @cab.Depth cm<br />
                        DistanceX: @cab.DistanceX cm<br />
                        DistanceY: @cab.DistanceY cm
                    </div>
                </div>

            }

       
            @foreach (var sp in data.Spaces)
            {
                var cleanedType = sp.Type?.Trim() ?? "null";
                var icon = cleanedType switch
                {
                    "Microwave" => "microwave.gif",
                    "Oven" => "Oven.gif",
                    "Range Hood" => "Range Hood.gif",
                    "DishWasher" => "dishwasher.gif",
                    _ => "other.png"
                };

                var imagePath = $"Images/{icon}";

                <div class="upper-tooltip-wrapper">
                    <img src="@imagePath" class="upper-icon" @onclick="() => SelectUpperSpace(sp)" />

                    <div class="upper-tooltip">
                        <div class="upper-corner-icons">
                            <img src="Images/edit.png" class="upper-corner-icon" />
                            <img src="Images/Delete.png" class="upper-corner-icon" />
                        </div>

                        <strong>@sp.Type</strong><br />
                        Width: @sp.Width cm<br />
                        Height: @sp.Height cm<br />
                        DistanceX: @sp.DistanceX cm<br />
                        DistanceY: @sp.DistanceY cm
                    </div>
                </div>

            }

        </div>
    </div>
}

